#!/usr/bin/env python2.7

import cmd
import os
import sys
import re
import json
import subprocess
import glob
import uuid
import time

from pippi import dsp, midi
from pippi.io import IOManager
from pippi.params import ParamManager

import multiprocessing as mp

class Pippi(cmd.Cmd):
    """ Pippi Console 
    """

    prompt = '^_- '
    intro = 'Pippi Console'

    def __init__(self):
        dsp.log('starting', 'w')
        cmd.Cmd.__init__(self)

        self.io = IOManager()
        self.params = ParamManager(self.io.ns)

    def do_bpm(self, bpm):
        if bpm == 'off':
            self.io.stop_grid()
        else:
            self.params.set('bpm', float(bpm), 'global')

            if self.io.ns.grid == False:
                self.io.start_grid(bpm)

            self.io.set_bpm(float(bpm))

    def do_i(self, cmd):
        """
List the number of voices for currently running instrument scripts.
        """
        print 'Looping:'
        for generator, process_list in self.io.looping.iteritems():
            print generator, len(process_list)
        print

        print 'Armed:'
        for generator in self.io.getArmed():
            print generator
        print

    def do_midi(self, cmd):
        """ List available midi devices """
        midi.print_devices()

    def do_device(self, device):
        """
Calling device with no arguments will print the current audio device.
Calling device with a device name (eg 'default') will select that audio device for playback.

Usage:
    device <device-name>

Examples:
    device
    device default
        """
        if device == '':
            print self.io.ns.device
        else:
            self.io.ns.device = device

    def do_set(self, cmd):
        """
Set a session variable within a namespace.

Usage: 
    set <namespace> <name> <value>

Examples:
    set global drift 0.5
    set drone drift 0.5
    set drone key c#
        """
        cmd = cmd.split(' ')

        namespace = cmd[0]
        param_name = cmd[1]
        param_value = cmd[2]

        self.params.set(param_name, param_value, namespace)

    def do_get(self, cmd):
        """
Get the value of a session variable.

Usage:
    get <name>

    (Returns all <name> values in any namespace)

    get <namespace> <name>

    (Returns <name> value for given namespace)

Examples:
    get drift
    get drone key
        """
        cmd = cmd.split(' ')

        if len(cmd) == 1:
            print self.params.getAll(cmd[0])
        elif len(cmd) == 2:
            print self.params.get(cmd[1], cmd[0])

    def do_key(self, cmd):
        """
Set default global key.

Usage:
    tune.default_key = ctl['param'].get('key', 'global')
        """
        self.params.set('key', cmd, 'global')

    def do_tune(self, cmd):
        """ 
Set tuning of A4 

Usage:
    tune.a0 = ctl['param'].get('tune', 'global')
        """
        self.params.set('tune', float(cmd) / 16.0, 'global')

    def do_p(self, cmd):
        """
Shorthand for play
        """
        self.do_play(cmd)

    def do_arm(self, cmd):
        cmd = cmd.split(' ')

        try:
            generator_name = cmd[0]
        except IndexError:
            print 'Please specify a generator name. Type "help play" for usage.'
            return False

        p = mp.Process(target=self.io.armGenerator, args=(generator_name,))
        p.start()

    def do_play(self, cmd):
        """
Play or loop instrument voices

Usage:
    play <instrument_name> <optional:number of voices> <optional:once|o>
    p <instrument_name> <optional:number of voices> <optional:once|o>

Examples:
    # Start looping one drone.py generator voice
    play drone 1

    # Or: 
    play drone

    # Start looping five voices
    p drone 5

    # Play one drone voice once without looping
    p drone 1 once

    # Play five drone voices once without looping
    p drone 5 o

    # Or use alternate syntax to play generators without looping
    # Play one drone voice once without looping
    once drone

    # Play five drone voices once without looping
    o drone 5
        """
        cmd = cmd.split(' ')

        try:
            generator_name = cmd[0]
        except IndexError:
            print 'Please specify a generator name. Type "help play" for usage.'
            return False

        try:
            num_voices = int(cmd[1])
        except IndexError:
            num_voices = 1

        try:
            loop = False if cmd[2] in ['once', 'o'] else True
        except IndexError:
            loop = True

        print cmd, loop

        self.io.playGenerator(generator_name, num_voices, loop=loop)

    def do_o(self, cmd):
        self.do_once(cmd)

    def do_once(self, cmd):
        """ Shortcut for play <generator> <voices> once """
        cmd = cmd.split(' ')
        generator = cmd[0]

        try:
            num_voices = cmd[1]
        except IndexError:
            num_voices = 1

        self.do_play('%s %s once' % (generator, num_voices))

    def do_disarm(self, generator):
        if generator in ['', 'all']:
            self.io.disarmAllGenerators()
        else:
            self.io.disarmGenerator(generator)

    def do_stop(self, generator):
        if generator in ['', 'all']:
            self.io.stopAllGenerators()
        else:
            self.io.stopGenerator(generator)

    def do_kill(self, generator):
        if generator in ['', 'all']:
            self.io.stopAllGenerators(kill=True)
        else:
            self.io.stopGenerator(generator, kill=True)

    def do_reload(self, opt):
        if opt == 'on':
            setattr(self.io.ns, 'reload', True)
        else:
            setattr(self.io.ns, 'reload', False)

    def do_quit(self, cmd):
        exit()

    def do_EOF(self, line):
        return True

    def postloop(self):
        pass

if __name__ == '__main__':
    console = Pippi()

    # Start looping command prompt
    try:
        console.cmdloop()
    except KeyboardInterrupt:
        exit()

