#!/usr/bin/env python2.7

import cmd
import os
import sys
import re
import json
import subprocess
import glob
import uuid
import time

import pygame.midi

from pippi import dsp
from pippi import IOManager
from pippi import ParamManager
from pippi import EventManager

import multiprocessing as mp

class Pippi(cmd.Cmd):
    """ Pippi Console 
    """

    dsp.log('starting', 'w')
    prompt = '^_- '
    intro = 'Pippi Console'

    def __init__(self):
        cmd.Cmd.__init__(self)

        self.io = IOManager()
        self.params = ParamManager(self.io.ns)
        self.events = EventManager(self.io.ns, self)

        self.voices = {}
        self.midi_listeners = {}

        # Start rhythm grid tick process
        #self.tick = mp.Event()
        #self.grid = mp.Process(name='grid', target=rt.grid, args=(self.tick, settings.config('bpm')))
        #self.grid.start()

        # Load all available generators into a dict 
        self.generators = []

        try:
            gens = glob.glob("*.py")
            for filename in gens:
                # Get fileame from relative path and strip .pippi.py extension
                filename = os.path.basename(filename)[:-3]
                self.generators += [ filename ]

            print len(gens), 'generators available'

        except OSError:
            print 'No generators found'

        print

    def do_bpm(self, cmd):
        try:
            self.grid.terminate()
            bpm = float(cmd)

            self.grid = mp.Process(name='grid', target=rt.grid, args=(self.tick, bpm))
            self.grid.start()
 
        except Exception, e:
            dsp.log(e)

    def do_i(self, cmd):
        """
List the number of voices for currently running instrument scripts.
        """
        for generator, process_list in self.voices.iteritems():
            print generator, len(process_list)

    def do_midi(self, selected_id):
        pygame.midi.init()

        if selected_id == '':
            for device_id in range(pygame.midi.get_count()):
                device = pygame.midi.get_device_info(device_id)
                if device[2] == True:
                    print '%s: %s' % (device_id, device[1]) 

        else:
            def capture_midi(device_id, ns):
                try:
                    device = pygame.midi.Input(int(device_id))
                    dsp.log('listening to %s' % device_id)

                    while True:
                        if device.poll():
                            midi_events = device.read(10)

                            for e in midi_events:
                                # timestamp = e[1]
                                # cc = e[0][1]
                                # value = e[0][2]
                                setattr(ns, 'cc%s%s' % (device_id, e[0][1]), e[0][2])

                        time.sleep(0.05)

                except pygame.midi.MidiException:
                    dsp.log('Midi device not found')

            listener = mp.Process(target=capture_midi, args=(selected_id, self.io.ns))
            listener.start()
            self.midi_listeners[selected_id] = listener

            print 'Activated midi device %s' % selected_id

        pygame.midi.quit()


    def do_device(self, device):
        """
Calling device with no arguments will print the current audio device.
Calling device with a device name (eg 'default') will select that audio device for playback.
        """
        if device == '':
            print self.io.ns.device
        else:
            self.io.ns.device = device

    def do_set(self, cmd):
        """
Set a session variable within a namespace.

Usage: 
    set <namespace> <name> <value>

Examples:
    set global drift 0.5
    set drone drift 0.5
    set drone key c#
        """
        cmd = cmd.split(' ')

        namespace = cmd[0]
        param_name = cmd[1]
        param_value = cmd[2]

        self.params.set(param_name, param_value, namespace)

    def do_get(self, cmd):
        """
Get the value of a session variable.

Usage:
    get <name>

    (Returns all <name> values in any namespace)

    get <namespace> <name>

    (Returns <name> value for given namespace)

Examples:
    get drift
    get drone key
        """
        cmd = cmd.split(' ')

        if len(cmd) == 1:
            print self.params.getAll(cmd[0])
        elif len(cmd) == 2:
            print self.params.get(cmd[1], cmd[0])

    def do_key(self, cmd):
        """
Set default global key.

Usage:
    tune.default_key = ctl['param'].get('key', 'global')
        """
        self.params.set('key', cmd, 'global')

    def do_tune(self, cmd):
        """ 
Set tuning of A4 

Usage:
    tune.a0 = ctl['param'].get('tune', 'global')
        """
        self.params.set('tune', float(cmd) / 16.0, 'global')

    def do_p(self, cmd):
        """
Shorthand for play
        """
        self.do_play(cmd)

    def do_play(self, cmd):
        """
Play instrument voices

Usage:
    play <instrument_name> <optional:number of voices>

Examples:
    # Play one drone voice
    play drone 1

    # Play one drone voice
    play drone

    # Play five drone voice
    play drone 5
        """
        cmd = cmd.split(' ')

        generator = None
        for gen in self.generators:
            if gen == cmd[0]:
                generator = gen

        try:
            num_voices = int(cmd[1])
        except IndexError:
            num_voices = 1

        if generator is not None:
            if generator not in self.voices:
                self.voices[generator] = {}

            for i in range(num_voices):
                voice_id = len(self.voices[generator]) + 1

                setattr(self.io.ns, '%s-%s-loop' % (generator, voice_id), True)
                p = mp.Process(target=self.io.play, args=(generator, self.io.ns, voice_id, i))
                p.start()

                self.voices[generator][voice_id] = p

    def do_o(self, cmd):
        self.do_once(cmd)

    def do_once(self, cmd):
        cmd = cmd.split(' ')

        generator = None
        for gen in self.generators:
            if gen == cmd[0]:
                generator = gen

        try:
            num_voices = int(cmd[1])
        except IndexError:
            num_voices = 1

        for i in range(num_voices):
            p = mp.Process(target=self.io.play, args=(generator, self.io.ns, uuid.uuid4(), i, False))
            p.start()

    def do_stop(self, generator):
        if generator in self.voices:
            for voice_id, process in self.voices[generator].iteritems():
                setattr(self.io.ns, '%s-%s-loop' % (generator, voice_id), False)
                process.join()
                process.terminate()

            del self.voices[generator]

        else:
            dsp.log('no %s voices found' % generator)

    def do_reload(self, opt):
        if opt == 'on':
            setattr(self.io.ns, 'reload', True)
        else:
            setattr(self.io.ns, 'reload', False)

    def do_quit(self, cmd):
        exit()

    def do_EOF(self, line):
        return True

    def postloop(self):
        pass

if __name__ == '__main__':
    console = Pippi()

    # Start looping command prompt
    try:
        console.cmdloop()
    except KeyboardInterrupt:
        exit()

