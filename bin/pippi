#!/usr/bin/env python2.7

import cmd
import os
import sys
import re
import json
import subprocess
import glob
import uuid
import time
from pippi import params

from pippi import dsp, midi, config, osc, project
from pippi.io import IOManager
from pippi.params import ParamManager

import multiprocessing as mp

class Pippi(cmd.Cmd):
    """ Pippi Console 
    """

    prompt = '^_- '
    intro = 'Pippi Console'

    def __init__(self):
        dsp.log('starting', 'w')
        cmd.Cmd.__init__(self)
        self.config = config.init()
        self.last_id = 0

        self.io = IOManager()
        self.params = ParamManager(self.io.ns)

    def do_bpm(self, bpm):
        if bpm == 'off':
            self.io.stop_grid()
        else:
            self.params.set('bpm', float(bpm), 'global')

            if self.io.ns.grid == False:
                self.io.startGrid(bpm)

            self.io.set_bpm(float(bpm))

    def do_clock(self, cmd):
        if cmd == '':
            print self.params.get('clock', 'off')
        else:
            self.params.set('clock', cmd)

    def do_p(self, cmd):
        instrument_name = params.find('instrument', cmd)
        oneshot = params.find('oneshot', cmd)
        loop = False if oneshot else True

        if self.io.validateInstrument(instrument_name):
            self.last_id += 1
            self.io.play(instrument_name, self.last_id, loop)

        else:
            print 'Could not find an instrument script named %s.py' % instrument_name

    def do_q(self, voice_id):
        q = self.params.get('%s-quantize' % voice_id, False)
        self.params.set('%s-quantize' % voice_id, not q)

    def do_i(self, cmd):
        """
List the number of voices for currently running instrument scripts.
        """
        print 'bpm: %s clock: %s \nkey: %s octave: %s' % (
                self.params.get('bpm', 100), 
                self.params.get('clock', 'off'), 
                self.params.get('key', 'c'), 
                self.params.get('octave', 3)
            )
        
        voice_info = self.io.get_voice_info()

        if len(voice_info) > 0:
            print 'voices playing:'
            for voice_id, instrument_name in voice_info.iteritems():
                print '    {} - {}'.format(voice_id, instrument_name)
            print

    def do_midi(self, cmd):
        """ List available midi devices or log input messages to pippi.log """

        if cmd == 'log' or cmd == 'log on':
            midi.input_log(self.io.ns, True)
        elif cmd == 'log off':
            midi.input_log(self.io.ns, False)
        else:
            midi.print_devices()

    def do_osc(self, cmd):
        if cmd == 'log' or cmd == 'log on':
            osc.input_log(self.io.ns, True)
        elif cmd == 'log off':
            osc.input_log(self.io.ns, False)
        elif cmd == '':
            osc.print_ports()
        else:

            try:
                self.io.startOscServer(int(cmd))
            except Exception as e:
                print str(e)


    def do_key(self, cmd):
        """
Set default global key.

Usage:
    tune.default_key = ctl['param'].get('key', 'global')
        """
        self.params.set('key', cmd, 'global')

    def do_tune(self, cmd):
        """ 
Set tuning of A4 

Usage:
    tune.a0 = ctl['param'].get('tune', 'global')
        """
        self.params.set('tune', float(cmd) / 16.0, 'global')

    def do_octave(self, cmd):
        self.params.set('octave', int(cmd), 'global')

    def do_channel(self, cmd):
        self.params.set('channel', int(cmd), 'global')

    def do_s(self, voice_id):
        if voice_id == '':
            for voice_id, inst in self.io.get_voice_info().iteritems():
                self.params.set('%s-loop' % voice_id, False)
        else:
            self.params.set('%s-loop' % voice_id, False)

    def do_reload(self, opt):
        if opt == 'on':
            setattr(self.io.ns, 'reload', True)
        else:
            setattr(self.io.ns, 'reload', False)

    def do_quit(self, cmd):
        exit()

    def do_EOF(self, line):
        return True

    def postloop(self):
        pass

if __name__ == '__main__':
    if len(sys.argv) > 2 and sys.argv[1] == 'init':
        project.init(sys.argv[2])                
    else:
        try:
            console = Pippi()
            console.cmdloop()
        except KeyboardInterrupt:
            exit()

