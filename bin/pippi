#!/usr/bin/env python2.7

import cmd
import os
import sys
import re
import json
import subprocess
import glob
import uuid
import time

from pippi import dsp, midi, config, osc
from pippi.io import IOManager
from pippi.params import ParamManager

import multiprocessing as mp

class Pippi(cmd.Cmd):
    """ Pippi Console 
    """

    prompt = '^_- '
    intro = 'Pippi Console'

    def __init__(self):
        dsp.log('starting', 'w')
        cmd.Cmd.__init__(self)
        self.config = config.init()
        self.last_id = 0

        self.io = IOManager()
        self.params = ParamManager(self.io.ns)

    def do_bpm(self, bpm):
        if bpm == 'off':
            self.io.stop_grid()
        else:
            self.params.set('bpm', float(bpm), 'global')

            if self.io.ns.grid == False:
                self.io.startGrid(bpm)

            self.io.set_bpm(float(bpm))

    def do_d(self, device):
        if device == '':
            print getattr(self.io.ns, 'selected-pattern-device', 'default')
        else:
            setattr(self.io.ns, 'selected-pattern-device', device)

    def do_p(self, cmd):
        cmds = cmd.split(' ')

        length = cmds[0].split('/')
        try:
            div = int(length[1])
        except IndexError:
            div = 1

        length = int(length[0])

        try:
            pat = cmds[1]
        except IndexError:
            pat = 'x' * length

        try:
            notes = cmds[2]
        except IndexError:
            notes = '1'

        self.last_id += 1

        self.io.startPattern(length, pat, notes, div, self.last_id)

    def do_i(self, cmd):
        """
List the number of voices for currently running instrument scripts.
        """
        print 'bpm: %s key: %s octave: %s' % (self.params.get('bpm', 100), self.params.get('key', 'c'), self.params.get('octave', 3))
        
        if len(self.io.looping) > 0:
            print 'Looping:'
            for generator, process_list in self.io.looping.iteritems():
                print generator, len(process_list)
            print

        armed = self.io.getArmed()
        if len(armed) > 0:
            print 'Armed:'
            for generator in armed:
                print generator
            print

        if len(self.io.patterns) > 0:
            print 'Patterns:'
            for i, pattern in self.io.patterns.iteritems():
                muted = 'P' if getattr(self.io.ns, 'pattern-play-%s' % pattern.id) else 'M'
                print '%02d' % i, muted, pattern
            print

    def do_midi(self, cmd):
        """ List available midi devices or log input messages to pippi.log """

        if cmd == 'log' or cmd == 'log on':
            midi.input_log(self.io.ns, True)
        elif cmd == 'log off':
            midi.input_log(self.io.ns, False)
        else:
            midi.print_devices()

    def do_osc(self, cmd):
        if cmd == 'log' or cmd == 'log on':
            osc.input_log(self.io.ns, True)
        elif cmd == 'log off':
            osc.input_log(self.io.ns, False)
        elif cmd == '':
            osc.print_ports()
        else:

            try:
                self.io.startOscServer(int(cmd))
            except Exception as e:
                print str(e)


    def do_device(self, device):
        """
Calling device with no arguments will print the current audio device.
Calling device with a device name (eg 'default') will select that audio device for playback.

Usage:
    device <device-name>

Examples:
    device
    device default
        """
        if device == '':
            print self.io.ns.device
        else:
            self.io.ns.device = device

    def do_set(self, cmd):
        """
Set a session variable within a namespace.

Usage: 
    set <namespace> <name> <value>

Examples:
    set global drift 0.5
    set drone drift 0.5
    set drone key c#
        """
        cmd = cmd.split(' ')

        namespace = cmd[0]
        param_name = cmd[1]
        param_value = cmd[2]

        self.params.set(param_name, param_value, namespace)

    def do_get(self, cmd):
        """
Get the value of a session variable.

Usage:
    get <name>

    (Returns all <name> values in any namespace)

    get <namespace> <name>

    (Returns <name> value for given namespace)

Examples:
    get drift
    get drone key
        """
        cmd = cmd.split(' ')

        if len(cmd) == 1:
            print self.params.getAll(cmd[0])
        elif len(cmd) == 2:
            print self.params.get(cmd[1], cmd[0])

    def do_key(self, cmd):
        """
Set default global key.

Usage:
    tune.default_key = ctl['param'].get('key', 'global')
        """
        self.params.set('key', cmd, 'global')

    def do_tune(self, cmd):
        """ 
Set tuning of A4 

Usage:
    tune.a0 = ctl['param'].get('tune', 'global')
        """
        self.params.set('tune', float(cmd) / 16.0, 'global')

    def do_octave(self, cmd):
        self.params.set('octave', int(cmd), 'global')

    def do_channel(self, cmd):
        self.params.set('channel', int(cmd), 'global')

    def do_arm(self, cmd):
        cmd = cmd.split(' ')

        try:
            generator_name = cmd[0]
        except IndexError:
            print 'Please specify a generator name. Type "help play" for usage.'
            return False

        p = mp.Process(target=self.io.armGenerator, args=(generator_name,))
        p.start()

    def do_play(self, cmd):
        """
Play or loop instrument voices

Usage:
    play <instrument_name> <optional:number of voices> <optional:once|o>

Examples:
    # Start looping one drone.py generator voice
    play drone 1

    # Or: 
    play drone

    # Start looping five voices
    play drone 5

    # Play one drone voice once without looping
    play drone 1!

    # Play five drone voices once without looping
    play drone 5!

        """
        if '!' in cmd:
            loop = False
            cmd = cmd[:-1]
        else:
            loop = True

        cmd = cmd.split(' ')

        try:
            generator_name = cmd[0]
        except IndexError:
            print 'Please specify a generator name. Type "help play" for usage.'
            return False

        try:
            num_voices = int(cmd[1])
        except IndexError:
            num_voices = 1

        self.io.playGenerator(generator_name, num_voices, loop=loop)

    def do_o(self, cmd):
        self.do_once(cmd)

    def do_once(self, cmd):
        """ Shortcut for play <generator> <voices> once """
        cmd = cmd.split(' ')
        generator = cmd[0]

        try:
            num_voices = cmd[1]
        except IndexError:
            num_voices = 1

        self.do_play('%s %s once' % (generator, num_voices))

    def do_disarm(self, generator):
        if generator in ['', 'all']:
            self.io.disarmAllGenerators()
        else:
            self.io.disarmGenerator(generator)

    def do_s(self, pat_id):
        pat_id = int(pat_id)
        # stop flag in ns
        setattr(self.io.ns, 'pattern-play-%s' % pat_id, False)
        setattr(self.io.ns, 'pattern-%s' % pat_id, False)
        # remove from array (pop)
        del self.io.patterns[pat_id]

    def do_m(self, pat_id):
        pat_id = int(pat_id)
        current = getattr(self.io.ns, 'pattern-play-%s' % pat_id)
        setattr(self.io.ns, 'pattern-play-%s' % pat_id, not current)

    def do_stop(self, generator):
        if generator in ['', 'all']:
            self.io.stopAllGenerators()
        else:
            self.io.stopGenerator(generator)

    def do_kill(self, generator):
        if generator in ['', 'all']:
            self.io.stopAllGenerators(kill=True)
        else:
            self.io.stopGenerator(generator, kill=True)

    def do_reload(self, opt):
        if opt == 'on':
            setattr(self.io.ns, 'reload', True)
        else:
            setattr(self.io.ns, 'reload', False)

    def do_quit(self, cmd):
        exit()

    def do_EOF(self, line):
        return True

    def postloop(self):
        pass

if __name__ == '__main__':
    console = Pippi()

    # Start looping command prompt
    try:
        console.cmdloop()
    except KeyboardInterrupt:
        exit()

